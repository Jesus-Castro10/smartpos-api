name: CI Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # üîπ Job 1: Lint
  lint:
    name: Run Linter (Checkstyle)
    runs-on: ubuntu-latest
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN}}

      - name: Super-Linter (M√∫ltiples lenguajes)
        uses: github/super-linter@v5
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_JAVA: true
          VALIDATE_JAVA_CHECKSTYLE: true
          FILTER_REGEX_INCLUDE: .*Producto.*\.java$

      - name: Setup Maven
        uses: s4u/setup-maven-action@v1.18.0
        with:
          maven-version: '3.9.9'


      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          check-latest: false
          cache: maven

      - name: Run Checkstyle
        run: mvn checkstyle:check -Dcheckstyle.includes=*/*Producto.java


  # üîπ Job 2: Tests con Coverage
  test:
    name: Run Tests with Coverage
    runs-on: ubuntu-latest
    env:
      DB_URL: ${{ secrets.DB_URL }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      MAIL_HOST: test
      MAIL_PORT: 123
      MAIL_USER: ${{ secrets.MAIL_USER }}
      MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN}}

      - name: Setup Maven
        uses: s4u/setup-maven-action@v1.18.0
        with:
          maven-version: '3.9.9'

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          check-latest: false
          cache: maven

      - name: Run tests with coverage
        run: mvn clean test jacoco:report

      - name: Install xmllint
        run: sudo apt-get update && sudo apt-get install -y libxml2-utils

      - name: Enforce coverage ‚â• 90%
        run: |
          # Verificar que el archivo existe
          if [ ! -f "target/site/jacoco/jacoco.xml" ]; then
            echo "‚ùå Error: jacoco.xml not found. Check if tests ran correctly."
            ls -la target/site/jacoco/ || echo "Directory doesn't exist"
            exit 1
          fi

          # Extraer valores con manejo de errores
          COVERAGE=$(xmllint --xpath "string(//counter[@type='INSTRUCTION']/@covered)" target/site/jacoco/jacoco.xml 2>/dev/null || echo "0")
          MISSED=$(xmllint --xpath "string(//counter[@type='INSTRUCTION']/@missed)" target/site/jacoco/jacoco.xml 2>/dev/null || echo "0")

          # Convertir a n√∫meros (por si vienen vac√≠os)
          COVERAGE=${COVERAGE:-0}
          MISSED=${MISSED:-0}

          echo "Covered instructions: $COVERAGE"
          echo "Missed instructions: $MISSED"

          TOTAL=$((COVERAGE + MISSED))
          
          if [ $TOTAL -eq 0 ]; then
            echo "‚ùå Error: No code analyzed (total instructions = 0)"
            exit 1
          fi

          PERCENT=$((100 * COVERAGE / TOTAL))
          echo "üìä Code Coverage: $PERCENT%"

          if [ $PERCENT -lt 90 ]; then
            echo "‚ùå Coverage below required 90%! Current: $PERCENT%"
            echo "üí° Improve your tests to increase coverage"
            exit 1
          else
            echo "‚úÖ Coverage meets requirement: $PERCENT%"
          fi

      - name: Upload coverage report
        if: ${{ !env.ACT }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: target/site/jacoco/

  # üîπ Job 3: Build
  build:
    name: Package Application
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN}}

      - name: Setup Maven
        uses: s4u/setup-maven-action@v1.18.0
        with:
          maven-version: '3.9.9'
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          check-latest: false
          cache: maven

      - name: Package app
        run: mvn package -DskipTests

      - name: Upload build artifact
        if: ${{ !env.ACT }}
        uses: actions/upload-artifact@v4
        with:
          name: springboot-app
          path: target/*.jar

  # üîπ Job 4: Docker
  docker:
    name: Build & Validate Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: success()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN}}

      - name: Build Docker image
        run: docker build -t springboot-app:latest .

      - name: Run container for validation
        run: docker run -d -p 8080:8080 --name springboot-app springboot-app:latest

      - name: Wait for app startup
        run: sleep 15

      - name: Check app is running
        run: curl -f http://localhost:8080 || (docker logs springboot-app && exit 1)
